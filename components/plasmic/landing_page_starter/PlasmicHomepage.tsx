// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: mPPg8I0ucCOUu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Navbar from "../../Navbar"; // plasmic-import: 2AU0qEyM1oCTCP/component
import Button from "../../Button"; // plasmic-import: kcMTy-wpYm5s_7/component
import AboutCard from "../../AboutCard"; // plasmic-import: _2BVlTZVvM/component
import FooterSection from "../../FooterSection"; // plasmic-import: 1ez9I6FpbEKqEg/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: mPPg8I0ucCOUu/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: Zu9y5vY-DbAu23/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  homeHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  columns?: p.Flex<"div">;
  column?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  aboutSection?: p.Flex<"div">;
  contactSection?: p.Flex<"div">;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>

        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Reveal
            className={classNames("__wab_instance", sty.reveal__jEiUm)}
            delay={1500 as const}
            duration={2300 as const}
            triggerOnce={true}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__evma4)}
              displayHeight={"792px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              src={{
                src: "/plasmic/laziness_demo/images/cloudTreewebp.webp",
                fullWidth: 3556,
                fullHeight: 4741,
                aspectRatio: undefined
              }}
            />
          </Reveal>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"homeHeroSection"}
              data-plasmic-override={overrides.homeHeroSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.homeHeroSection)}
            >
              <Navbar
                data-plasmic-name={"navbar"}
                data-plasmic-override={overrides.navbar}
                className={classNames("__wab_instance", sty.navbar)}
              />

              <p.Stack
                as={"div"}
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div
                  data-plasmic-name={"column"}
                  data-plasmic-override={overrides.column}
                  className={classNames(projectcss.all, sty.column)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__dMkDl)}
                  >
                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__fRaUl
                      )}
                      damping={undefined}
                      delay={5200 as const}
                      duration={2000 as const}
                      effect={"fade" as const}
                      reverse={false}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eSfse,
                          "vertical-word" as const
                        )}
                      >
                        {"慵懶，​也可以與眾不同"}
                      </div>
                    </Reveal>

                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__dniWd
                      )}
                      damping={undefined}
                      delay={3900 as const}
                      duration={2000 as const}
                      effect={"fade" as const}
                      reverse={false}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qzYz,
                          "vertical-word" as const
                        )}
                      >
                        {"精心打造完美極致，​"}
                      </div>
                    </Reveal>

                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__vwjPk
                      )}
                      damping={undefined}
                      delay={2600 as const}
                      duration={2000 as const}
                      effect={"fade" as const}
                      reverse={false}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pvigX,
                          "vertical-word" as const
                        )}
                      >
                        {"盡心思考，悉心感受。"}
                      </div>
                    </Reveal>

                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__vNefP
                      )}
                      damping={undefined}
                      delay={1300 as const}
                      duration={2000 as const}
                      effect={"fade" as const}
                      reverse={false}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hp6B7,
                          "vertical-word" as const
                        )}
                      >
                        {"揮灑工程的汗水，成就工程的永恆"}
                      </div>
                    </Reveal>

                    <Reveal
                      cascade={false}
                      className={classNames("__wab_instance", sty.reveal__twEo)}
                      damping={undefined}
                      duration={2000 as const}
                      effect={"fade" as const}
                      reverse={false}
                      triggerOnce={true}
                    >
                      <h3
                        data-plasmic-name={"h3"}
                        data-plasmic-override={overrides.h3}
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3,
                          "vertical-word" as const
                        )}
                      >
                        {"精算工程的價值，享受工程的奧妙"}
                      </h3>
                    </Reveal>
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"aboutSection"}
            data-plasmic-override={overrides.aboutSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.aboutSection)}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal__b7ZY)}
              delay={2200 as const}
              duration={2300 as const}
              triggerOnce={true}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img___8VRm5)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("1032px" as const)
                    : ("1276px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("100%" as const)
                    : ("1411px" as const)
                }
                loading={"lazy" as const}
                src={{
                  src: "/plasmic/laziness_demo/images/constructionpng.png",
                  fullWidth: 1121,
                  fullHeight: 1006,
                  aspectRatio: undefined
                }}
              />
            </Reveal>

            <div className={classNames(projectcss.all, sty.freeBox__gYXgv)}>
              <Reveal
                cascade={false}
                className={classNames("__wab_instance", sty.reveal__jbvFs)}
                direction={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("up" as const)
                    : ("left" as const)
                }
                effect={"fade" as const}
                triggerOnce={true}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__eQxa)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4___8NItU,
                      "" as const
                    )}
                  >
                    {"#懶得算，幫你精打細算"}
                  </h4>

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__krYd6,
                      "" as const
                    )}
                  >
                    {"更快速及精確的掌握"}
                  </h2>

                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__quoig,
                      "" as const
                    )}
                  >
                    {"懶得算，幫你精打細算"}
                  </h6>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bTOd
                    )}
                  >
                    {
                      "工程預算為影響工程之脈絡，細心的清圖及釋疑，讓工程執行更為流暢，成本控制更為精確，工程品質更有保障。"
                    }
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button__cmlJc)}
                    color={"primary" as const}
                    link={`/about`}
                    round={true}
                  >
                    {"關於我們"}
                  </Button>
                </p.Stack>
              </Reveal>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"contactSection"}
            data-plasmic-override={overrides.contactSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.contactSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ribUq)}
            >
              <Reveal
                big={false}
                className={classNames("__wab_instance", sty.reveal__oEYmC)}
                direction={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("up" as const)
                    : ("right" as const)
                }
                triggerOnce={true}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__oYaqq)}
                >
                  <h4
                    className={classNames(
                      projectcss.all,
                      projectcss.h4,
                      projectcss.__wab_text,
                      sty.h4__xCmVw,
                      "" as const
                    )}
                  >
                    {"#堅強專業的團隊"}
                  </h4>

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__ipP,
                      "" as const
                    )}
                  >
                    {"專業營建管理"}
                  </h2>

                  <h6
                    className={classNames(
                      projectcss.all,
                      projectcss.h6,
                      projectcss.__wab_text,
                      sty.h6__xjPvn,
                      "" as const
                    )}
                  >
                    {"從平面到3D圖型，一次搞定"}
                  </h6>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__w3S1G
                    )}
                  >
                    {
                      "本公司配有甲級工程營造管理證照，更擁有土木技師顧問，再藉由本公司優秀的估算人員，組成堅強無比專業的團隊。"
                    }
                  </div>

                  <Button
                    className={classNames("__wab_instance", sty.button___2NPfY)}
                    color={"primary" as const}
                    link={`/contact`}
                    round={true}
                  >
                    {"聯絡我們"}
                  </Button>
                </p.Stack>
              </Reveal>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4Zqdh)}
              >
                <Reveal
                  cascade={true}
                  className={classNames("__wab_instance", sty.reveal__dpSjK)}
                  effect={"fade" as const}
                  triggerOnce={true}
                >
                  <AboutCard
                    card={true}
                    className={classNames(
                      "__wab_instance",
                      sty.aboutCard__q0OIz
                    )}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sslFf
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "結構估算(鋼筋、模板、混凝土數量估算、鋼筋施工圖檢視)、裝修估算(室內及外裝修數量、分層、分戶)、工程預算書及標單編列。"
                          : "結構體估算(鋼構、鋼筋、模板、混凝土數量)"}
                      </div>
                    }
                    heading={"專業的服務項目"}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__wgkYu)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? {
                                src: "/plasmic/laziness_demo/images/professionalwebp.webp",
                                fullWidth: 5066,
                                fullHeight: 3377,
                                aspectRatio: undefined
                              }
                            : {
                                src: "/plasmic/laziness_demo/images/professionalwebp.webp",
                                fullWidth: 5066,
                                fullHeight: 3377,
                                aspectRatio: undefined
                              }
                        }
                      />
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button___0C8WF
                      )}
                      color={"primary" as const}
                      link={`/services`}
                      round={true}
                    >
                      {"服務項目"}
                    </Button>
                  </AboutCard>

                  <AboutCard
                    card={true}
                    className={classNames(
                      "__wab_instance",
                      sty.aboutCard__v3MYx
                    )}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__g2JJk
                        )}
                      >
                        {"裝修估算(室內及外裝修數量)"}
                      </div>
                    }
                    heading={"不斷累積的專案經驗"}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__q51Ti)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/laziness_demo/images/tower.webp",
                          fullWidth: 5715,
                          fullHeight: 3810,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <Button
                      className={classNames("__wab_instance", sty.button__azQ7)}
                      color={"primary" as const}
                      link={`/project`}
                      round={true}
                    >
                      {"工程實績"}
                    </Button>
                  </AboutCard>

                  <AboutCard
                    card={true}
                    className={classNames(
                      "__wab_instance",
                      sty.aboutCard__pRjb3
                    )}
                    description={"工程預算書及標單編列製作"}
                    heading={"清楚的收費方式"}
                    image={
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__eLu5A)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/laziness_demo/images/meeting1.webp",
                          fullWidth: 7360,
                          fullHeight: 4912,
                          aspectRatio: undefined
                        }}
                      />
                    }
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__rukeC
                      )}
                      color={"primary" as const}
                      link={`/price`}
                      round={true}
                    >
                      {"價目表"}
                    </Button>
                  </AboutCard>
                </Reveal>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "homeHeroSection",
    "navbar",
    "columns",
    "column",
    "h3",
    "aboutSection",
    "contactSection",
    "footerSection"
  ],
  homeHeroSection: ["homeHeroSection", "navbar", "columns", "column", "h3"],
  navbar: ["navbar"],
  columns: ["columns", "column", "h3"],
  column: ["column", "h3"],
  h3: ["h3"],
  aboutSection: ["aboutSection"],
  contactSection: ["contactSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  homeHeroSection: "div";
  navbar: typeof Navbar;
  columns: "div";
  column: "div";
  h3: "h3";
  aboutSection: "div";
  contactSection: "div";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    homeHeroSection: makeNodeComponent("homeHeroSection"),
    navbar: makeNodeComponent("navbar"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h3: makeNodeComponent("h3"),
    aboutSection: makeNodeComponent("aboutSection"),
    contactSection: makeNodeComponent("contactSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "首頁",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
