// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: 2AU0qEyM1oCTCP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: kcMTy-wpYm5s_7/component
import Logo from "../../Logo"; // plasmic-import: kosXDNVVRUk_WE/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicNavbar.module.css"; // plasmic-import: 2AU0qEyM1oCTCP/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: Zu9y5vY-DbAu23/icon
import HamburgerIcon from "./icons/PlasmicIcon__Hamburger"; // plasmic-import: S_mtU_iCMI9e-q/icon

export type PlasmicNavbar__VariantMembers = {
  showModal: "showModal";
};

export type PlasmicNavbar__VariantsArgs = {
  showModal?: SingleBooleanChoiceArg<"showModal">;
};

type VariantPropType = keyof PlasmicNavbar__VariantsArgs;
export const PlasmicNavbar__VariantProps = new Array<VariantPropType>(
  "showModal"
);

export type PlasmicNavbar__ArgsType = {};
type ArgPropType = keyof PlasmicNavbar__ArgsType;
export const PlasmicNavbar__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbar__OverridesType = {
  root?: p.Flex<"div">;
  logoContainer?: p.Flex<"div">;
  hamburger?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  modal?: p.Flex<"div">;
  closeIcon?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultNavbarProps {
  showModal?: SingleBooleanChoiceArg<"showModal">;
  className?: string;
}

function PlasmicNavbar__RenderFunc(props: {
  variants: PlasmicNavbar__VariantsArgs;
  args: PlasmicNavbar__ArgsType;
  overrides: PlasmicNavbar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.rootshowModal]: hasVariant(variants, "showModal", "showModal") }
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ifiW)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__scFmz)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__aUsln)}
              color={"navLink" as const}
              link={`/`}
            >
              {"首頁"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__r3GGj)}
              color={"navLink" as const}
              link={`/about`}
            >
              {"公司簡介"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__arOz5)}
              color={"navLink" as const}
              link={`/project`}
            >
              {"工程實績"}
            </Button>
          </p.Stack>

          <div
            data-plasmic-name={"logoContainer"}
            data-plasmic-override={overrides.logoContainer}
            className={classNames(projectcss.all, sty.logoContainer)}
          >
            <Logo className={classNames("__wab_instance", sty.logo__ioShS)} />
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__wdExf)}
          >
            <Button
              className={classNames("__wab_instance", sty.button__wyHno)}
              color={"navLink" as const}
              link={`/services`}
            >
              {"服務項目"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__oDLgG)}
              color={"navLink" as const}
              link={`/price`}
            >
              {"價目表"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button___2G5Wu)}
              color={"navLink" as const}
              link={`/contact`}
            >
              {"聯絡我們"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__axQ7P)}
              color={"navLink" as const}
              link={`/login`}
              outline={true}
            >
              {"會員資訊平台"}
            </Button>
          </p.Stack>
        </p.Stack>
      ) : null}

      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__pqNE, {
            [sty.freeBoxshowModal__pqNEuyJcM]: hasVariant(
              variants,
              "showModal",
              "showModal"
            )
          })}
        >
          <Logo className={classNames("__wab_instance", sty.logo__uJm9Z)} />

          <div
            data-plasmic-name={"hamburger"}
            data-plasmic-override={overrides.hamburger}
            className={classNames(projectcss.all, sty.hamburger)}
          >
            <HamburgerIcon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg, {
                [sty.svgshowModal]: hasVariant(
                  variants,
                  "showModal",
                  "showModal"
                )
              })}
              role={"img"}
            />
          </div>
        </div>
      ) : null}

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__a2Fh4)}>
          <div className={classNames(projectcss.all, sty.freeBox__xA0Ge)}>
            <Button
              className={classNames("__wab_instance", sty.button__ofDdT)}
              color={"navLink" as const}
              link={`/`}
            >
              {"首頁"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__dFyOs)}
              color={"navLink" as const}
              link={`/about`}
            >
              {"公司簡介"}
            </Button>

            <Button
              className={classNames("__wab_instance", sty.button__p0M4F)}
              color={"navLink" as const}
              link={`/project`}
            >
              {"工程實績"}
            </Button>
          </div>

          <Button
            className={classNames("__wab_instance", sty.button___98EN)}
            color={"navLink" as const}
            link={`/services`}
          >
            {"服務項目"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__hoNCz)}
            color={"navLink" as const}
          >
            {"價目表"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__oF1O2)}
            color={"navLink" as const}
            link={`/contact`}
          >
            {"聯絡我們"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__p82H)}
            color={"navLink" as const}
            outline={true}
          >
            {"會員資訊平台"}
          </Button>
        </div>
      ) : null}

      {(
        hasVariant(variants, "showModal", "showModal") &&
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"modal"}
          data-plasmic-override={overrides.modal}
          hasGap={true}
          className={classNames(
            projectcss.all,
            sty.modal,
            "modal-pop" as const,
            {
              [sty.modalshowModal]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            }
          )}
        >
          <Button
            className={classNames("__wab_instance", sty.button___1UgVl, {
              [sty.buttonshowModal___1UgVlUyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/`}
          >
            {"首頁"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__eXzmm, {
              [sty.buttonshowModal__eXzmmUyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/about`}
          >
            {"公司簡介"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__tp7Xx, {
              [sty.buttonshowModal__tp7XxUyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/project`}
          >
            {"工程實績"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__cFzWn, {
              [sty.buttonshowModal__cFzWnUyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/services`}
          >
            {"服務項目"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__qaXs1, {
              [sty.buttonshowModal__qaXs1UyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/price`}
          >
            {"價目表"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__assMv, {
              [sty.buttonshowModal__assMvUyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/contact`}
          >
            {"聯絡我們"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__lIhF4, {
              [sty.buttonshowModal__lIhF4UyJcM]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            color={"navLink" as const}
            link={`/login`}
            outline={true}
          >
            {"會員資訊平台"}
          </Button>

          <p.PlasmicImg
            data-plasmic-name={"closeIcon"}
            data-plasmic-override={overrides.closeIcon}
            alt={""}
            className={classNames(sty.closeIcon, {
              [sty.closeIconshowModal]: hasVariant(
                variants,
                "showModal",
                "showModal"
              )
            })}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/laziness_demo/images/crossIcons8Multiply50Png.png",
              fullWidth: 50,
              fullHeight: 50,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logoContainer", "hamburger", "svg", "modal", "closeIcon"],
  logoContainer: ["logoContainer"],
  hamburger: ["hamburger", "svg"],
  svg: ["svg"],
  modal: ["modal", "closeIcon"],
  closeIcon: ["closeIcon"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logoContainer: "div";
  hamburger: "div";
  svg: "svg";
  modal: "div";
  closeIcon: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbar__VariantsArgs;
    args?: PlasmicNavbar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbar__ArgProps,
          internalVariantPropNames: PlasmicNavbar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbar";
  } else {
    func.displayName = `PlasmicNavbar.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbar = Object.assign(
  // Top-level PlasmicNavbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logoContainer: makeNodeComponent("logoContainer"),
    hamburger: makeNodeComponent("hamburger"),
    svg: makeNodeComponent("svg"),
    modal: makeNodeComponent("modal"),
    closeIcon: makeNodeComponent("closeIcon"),

    // Metadata about props expected for PlasmicNavbar
    internalVariantProps: PlasmicNavbar__VariantProps,
    internalArgProps: PlasmicNavbar__ArgProps
  }
);

export default PlasmicNavbar;
/* prettier-ignore-end */
