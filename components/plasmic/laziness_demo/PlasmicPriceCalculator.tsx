// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: d8mQqWAV6f
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: kcMTy-wpYm5s_7/component
import TextInput from "../../TextInput"; // plasmic-import: f3MaxzneYzglDZ/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "../landing_page_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicPriceCalculator.module.css"; // plasmic-import: d8mQqWAV6f/css

import AppleIcon from "../landing_page_starter/icons/PlasmicIcon__Apple"; // plasmic-import: Zu9y5vY-DbAu23/icon
import SearchIcon from "../landing_page_starter/icons/PlasmicIcon__Search"; // plasmic-import: lDxLgl1XFFiQRC/icon
import CheckIcon from "../landing_page_starter/icons/PlasmicIcon__Check"; // plasmic-import: gHCuOW8JEryqrm/icon

export type PlasmicPriceCalculator__VariantMembers = {};

export type PlasmicPriceCalculator__VariantsArgs = {};
type VariantPropType = keyof PlasmicPriceCalculator__VariantsArgs;
export const PlasmicPriceCalculator__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPriceCalculator__ArgsType = {};
type ArgPropType = keyof PlasmicPriceCalculator__ArgsType;
export const PlasmicPriceCalculator__ArgProps = new Array<ArgPropType>();

export type PlasmicPriceCalculator__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultPriceCalculatorProps {
  className?: string;
}

function PlasmicPriceCalculator__RenderFunc(props: {
  variants: PlasmicPriceCalculator__VariantsArgs;
  args: PlasmicPriceCalculator__ArgsType;
  overrides: PlasmicPriceCalculator__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__gIeAp)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__tkwlq)}
          color={"red" as const}
        >
          {"結構體估算"}
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__rrSfm)}
          color={"pink" as const}
        >
          {"含裝修估算"}
        </Button>
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__s1Sgp)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__mVcgD)}
          color={"red" as const}
        >
          {"RC"}
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__eDnq)}
          color={"pink" as const}
        >
          {"SRC/SC"}
        </Button>

        <Button
          className={classNames("__wab_instance", sty.button__lyshw)}
          color={"pink" as const}
        >
          {"SS"}
        </Button>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__l9Vh2)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__pVw6L
          )}
        >
          {"500m3(含)以下:"}
        </div>

        <TextInput
          className={classNames("__wab_instance", sty.textInput__tacxL)}
          placeholder={"請輸入各棟樓地板面積" as const}
          type={"number" as const}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__aUoTx)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text___0MeZy
          )}
        >
          {"1500~3500m3(含)以下:"}
        </div>

        <TextInput
          className={classNames("__wab_instance", sty.textInput___1IECj)}
          placeholder={"請輸入各棟樓地板面積" as const}
          type={"number" as const}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__yaXz5)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__j4P0T
          )}
        >
          {"3500~10000m3(含)以下:"}
        </div>

        <TextInput
          className={classNames("__wab_instance", sty.textInput__qUhig)}
          placeholder={"請輸入各棟樓地板面積" as const}
          type={"number" as const}
        />
      </div>

      <div className={classNames(projectcss.all, sty.freeBox__zHll6)}>
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__j7KRg
          )}
        >
          {"10000m3以上:"}
        </div>

        <TextInput
          className={classNames("__wab_instance", sty.textInput__ySkHt)}
          placeholder={"請輸入各棟樓地板面積" as const}
          type={"number" as const}
        />
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__v9Pxl)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__vpswv)}
          color={"red" as const}
        >
          {"開始計算"}
        </Button>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPriceCalculator__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPriceCalculator__VariantsArgs;
    args?: PlasmicPriceCalculator__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPriceCalculator__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPriceCalculator__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPriceCalculator__ArgProps,
          internalVariantPropNames: PlasmicPriceCalculator__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPriceCalculator__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPriceCalculator";
  } else {
    func.displayName = `PlasmicPriceCalculator.${nodeName}`;
  }
  return func;
}

export const PlasmicPriceCalculator = Object.assign(
  // Top-level PlasmicPriceCalculator renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicPriceCalculator
    internalVariantProps: PlasmicPriceCalculator__VariantProps,
    internalArgProps: PlasmicPriceCalculator__ArgProps
  }
);

export default PlasmicPriceCalculator;
/* prettier-ignore-end */
