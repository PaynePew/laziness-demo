// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: CtTUSfG2PU6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Divider from "../../Divider"; // plasmic-import: cTOkkRidcYFrIe/component
import TextInput from "../../TextInput"; // plasmic-import: f3MaxzneYzglDZ/component
import Button from "../../Button"; // plasmic-import: kcMTy-wpYm5s_7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicRegisterForm.module.css"; // plasmic-import: CtTUSfG2PU6/css

import SearchIcon from "../landing_page_starter/icons/PlasmicIcon__Search"; // plasmic-import: lDxLgl1XFFiQRC/icon
import CheckIcon from "../landing_page_starter/icons/PlasmicIcon__Check"; // plasmic-import: gHCuOW8JEryqrm/icon
import Rolling1S200PxsvgIcon from "./icons/PlasmicIcon__Rolling1S200Pxsvg"; // plasmic-import: bpymhvy4a/icon
import AppleIcon from "../landing_page_starter/icons/PlasmicIcon__Apple"; // plasmic-import: Zu9y5vY-DbAu23/icon
import WandIcon from "../landing_page_starter/icons/PlasmicIcon__Wand"; // plasmic-import: iQv5jNrYURIoDO/icon

export type PlasmicRegisterForm__VariantMembers = {
  isSignUpFlow: "isSignUpFlow";
  isLoading: "isLoading";
  isError: "isError";
};

export type PlasmicRegisterForm__VariantsArgs = {
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  isError?: SingleBooleanChoiceArg<"isError">;
};

type VariantPropType = keyof PlasmicRegisterForm__VariantsArgs;
export const PlasmicRegisterForm__VariantProps = new Array<VariantPropType>(
  "isSignUpFlow",
  "isLoading",
  "isError"
);

export type PlasmicRegisterForm__ArgsType = {
  errorMessage?: React.ReactNode;
};

type ArgPropType = keyof PlasmicRegisterForm__ArgsType;
export const PlasmicRegisterForm__ArgProps = new Array<ArgPropType>(
  "errorMessage"
);

export type PlasmicRegisterForm__OverridesType = {
  root?: p.Flex<"div">;
  requestForm?: p.Flex<"form">;
  emailInput?: p.Flex<typeof TextInput>;
  passwordInput?: p.Flex<typeof TextInput>;
  nameInput?: p.Flex<typeof TextInput>;
  companyInput?: p.Flex<typeof TextInput>;
  jobTitleInput?: p.Flex<typeof TextInput>;
  phoneNumberInput?: p.Flex<typeof TextInput>;
  addressInput?: p.Flex<typeof TextInput>;
  submitButton?: p.Flex<typeof Button>;
  toggleForm?: p.Flex<typeof Button>;
  button?: p.Flex<typeof Button>;
};

export interface DefaultRegisterFormProps {
  errorMessage?: React.ReactNode;
  isSignUpFlow?: SingleBooleanChoiceArg<"isSignUpFlow">;
  isLoading?: SingleBooleanChoiceArg<"isLoading">;
  isError?: SingleBooleanChoiceArg<"isError">;
  className?: string;
}

function PlasmicRegisterForm__RenderFunc(props: {
  variants: PlasmicRegisterForm__VariantsArgs;
  args: PlasmicRegisterForm__ArgsType;
  overrides: PlasmicRegisterForm__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisError]: hasVariant(variants, "isError", "isError"),
          [sty.rootisLoading]: hasVariant(variants, "isLoading", "isLoading"),
          [sty.rootisLoading_isSignUpFlow]:
            hasVariant(variants, "isSignUpFlow", "isSignUpFlow") &&
            hasVariant(variants, "isLoading", "isLoading"),
          [sty.rootisSignUpFlow]: hasVariant(
            variants,
            "isSignUpFlow",
            "isSignUpFlow"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__h2WvG)}>
        <p.Stack
          as={"form"}
          data-plasmic-name={"requestForm"}
          data-plasmic-override={overrides.requestForm}
          hasGap={true}
          className={classNames(projectcss.all, sty.requestForm, {
            [sty.requestFormisSignUpFlow]: hasVariant(
              variants,
              "isSignUpFlow",
              "isSignUpFlow"
            )
          })}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ffhk7)}
          >
            <Divider
              className={classNames("__wab_instance", sty.divider__mT7Jv)}
            />

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uakh8
              )}
            >
              {"Or"}
            </div>

            <Divider
              className={classNames("__wab_instance", sty.divider___0EQt9)}
            />
          </p.Stack>

          {(hasVariant(variants, "isError", "isError") ? true : true) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox__dfaRb, {
                [sty.freeBoxisError__dfaRbXmpE]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: "顯示錯誤訊息",
                value: args.errorMessage,
                className: classNames(sty.slotTargetErrorMessage, {
                  [sty.slotTargetErrorMessageisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  )
                })
              })}
            </div>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__cEa2N)}
          >
            <TextInput
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput, {
                [sty.emailInputisError]: hasVariant(
                  variants,
                  "isError",
                  "isError"
                ),
                [sty.emailInputisSignUpFlow]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              defaultValue={"" as const}
              placeholder={"帳號(電子郵件)*" as const}
              type={"email" as const}
            />

            <TextInput
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput, {
                [sty.passwordInputisSignUpFlow]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              placeholder={"密碼*" as const}
              type={"password" as const}
            />

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? true
                : false
            ) ? (
              <TextInput
                data-plasmic-name={"nameInput"}
                data-plasmic-override={overrides.nameInput}
                className={classNames("__wab_instance", sty.nameInput, {
                  [sty.nameInputisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.nameInputisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                })}
                defaultValue={"" as const}
                placeholder={"姓名*" as const}
                type={"text" as const}
              />
            ) : null}

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? true
                : false
            ) ? (
              <TextInput
                data-plasmic-name={"companyInput"}
                data-plasmic-override={overrides.companyInput}
                className={classNames("__wab_instance", sty.companyInput, {
                  [sty.companyInputisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.companyInputisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                })}
                defaultValue={"" as const}
                placeholder={"公司名稱" as const}
                type={"text" as const}
              />
            ) : null}

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? true
                : false
            ) ? (
              <TextInput
                data-plasmic-name={"jobTitleInput"}
                data-plasmic-override={overrides.jobTitleInput}
                className={classNames("__wab_instance", sty.jobTitleInput, {
                  [sty.jobTitleInputisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.jobTitleInputisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                })}
                defaultValue={"" as const}
                placeholder={"職稱" as const}
                type={"text" as const}
              />
            ) : null}

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? true
                : false
            ) ? (
              <TextInput
                data-plasmic-name={"phoneNumberInput"}
                data-plasmic-override={overrides.phoneNumberInput}
                className={classNames("__wab_instance", sty.phoneNumberInput, {
                  [sty.phoneNumberInputisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.phoneNumberInputisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                })}
                defaultValue={"" as const}
                placeholder={"聯絡電話" as const}
                type={"text" as const}
              />
            ) : null}

            {(
              hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? true
                : false
            ) ? (
              <TextInput
                data-plasmic-name={"addressInput"}
                data-plasmic-override={overrides.addressInput}
                className={classNames("__wab_instance", sty.addressInput, {
                  [sty.addressInputisError]: hasVariant(
                    variants,
                    "isError",
                    "isError"
                  ),
                  [sty.addressInputisSignUpFlow]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                })}
                defaultValue={"" as const}
                placeholder={"地址" as const}
                type={"text" as const}
              />
            ) : null}
          </p.Stack>

          {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
            <Rolling1S200PxsvgIcon
              className={classNames(projectcss.all, sty.svg__hZs5C, {
                [sty.svgisLoading__hZs5Ctfjup]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                )
              })}
              role={"img"}
            />
          ) : null}

          {(hasVariant(variants, "isLoading", "isLoading") ? true : true) ? (
            <Button
              data-plasmic-name={"submitButton"}
              data-plasmic-override={overrides.submitButton}
              className={classNames("__wab_instance", sty.submitButton, {
                [sty.submitButtonisLoading]: hasVariant(
                  variants,
                  "isLoading",
                  "isLoading"
                ),
                [sty.submitButtonisSignUpFlow]: hasVariant(
                  variants,
                  "isSignUpFlow",
                  "isSignUpFlow"
                )
              })}
              color={"red" as const}
              endIcon={
                <WandIcon
                  className={classNames(projectcss.all, sty.svg___9Guzp)}
                  role={"img"}
                />
              }
            >
              {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? "註冊"
                : "登入"}
            </Button>
          ) : null}
        </p.Stack>

        <Divider className={classNames("__wab_instance", sty.divider__uOrrc)} />

        <div className={classNames(projectcss.all, sty.freeBox__cf4IU)}>
          <Button
            data-plasmic-name={"toggleForm"}
            data-plasmic-override={overrides.toggleForm}
            className={classNames("__wab_instance", sty.toggleForm, {
              [sty.toggleFormisSignUpFlow]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            flat={true}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vXtie,
                {
                  [sty.textisSignUpFlow__vXtieuphR8]: hasVariant(
                    variants,
                    "isSignUpFlow",
                    "isSignUpFlow"
                  )
                }
              )}
            >
              {hasVariant(variants, "isSignUpFlow", "isSignUpFlow")
                ? "帳號登入"
                : "帳號註冊"}
            </div>
          </Button>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mNuBn
            )}
          >
            {"此為估算成果交付平台"}
          </div>

          <Button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames("__wab_instance", sty.button, {
              [sty.buttonisSignUpFlow]: hasVariant(
                variants,
                "isSignUpFlow",
                "isSignUpFlow"
              )
            })}
            color={"link" as const}
            flat={true}
            link={`/contact`}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gnjTr
              )}
            >
              {"工程估算問題，請直接聯絡我們"}
            </div>
          </Button>
        </div>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "requestForm",
    "emailInput",
    "passwordInput",
    "nameInput",
    "companyInput",
    "jobTitleInput",
    "phoneNumberInput",
    "addressInput",
    "submitButton",
    "toggleForm",
    "button"
  ],
  requestForm: [
    "requestForm",
    "emailInput",
    "passwordInput",
    "nameInput",
    "companyInput",
    "jobTitleInput",
    "phoneNumberInput",
    "addressInput",
    "submitButton"
  ],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  nameInput: ["nameInput"],
  companyInput: ["companyInput"],
  jobTitleInput: ["jobTitleInput"],
  phoneNumberInput: ["phoneNumberInput"],
  addressInput: ["addressInput"],
  submitButton: ["submitButton"],
  toggleForm: ["toggleForm"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  requestForm: "form";
  emailInput: typeof TextInput;
  passwordInput: typeof TextInput;
  nameInput: typeof TextInput;
  companyInput: typeof TextInput;
  jobTitleInput: typeof TextInput;
  phoneNumberInput: typeof TextInput;
  addressInput: typeof TextInput;
  submitButton: typeof Button;
  toggleForm: typeof Button;
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegisterForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegisterForm__VariantsArgs;
    args?: PlasmicRegisterForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegisterForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRegisterForm__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRegisterForm__ArgProps,
          internalVariantPropNames: PlasmicRegisterForm__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicRegisterForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegisterForm";
  } else {
    func.displayName = `PlasmicRegisterForm.${nodeName}`;
  }
  return func;
}

export const PlasmicRegisterForm = Object.assign(
  // Top-level PlasmicRegisterForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    requestForm: makeNodeComponent("requestForm"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    nameInput: makeNodeComponent("nameInput"),
    companyInput: makeNodeComponent("companyInput"),
    jobTitleInput: makeNodeComponent("jobTitleInput"),
    phoneNumberInput: makeNodeComponent("phoneNumberInput"),
    addressInput: makeNodeComponent("addressInput"),
    submitButton: makeNodeComponent("submitButton"),
    toggleForm: makeNodeComponent("toggleForm"),
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicRegisterForm
    internalVariantProps: PlasmicRegisterForm__VariantProps,
    internalArgProps: PlasmicRegisterForm__ArgProps
  }
);

export default PlasmicRegisterForm;
/* prettier-ignore-end */
