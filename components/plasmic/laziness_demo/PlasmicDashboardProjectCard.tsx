// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: MYiOb2nF0s
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: kcMTy-wpYm5s_7/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "../landing_page_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicDashboardProjectCard.module.css"; // plasmic-import: MYiOb2nF0s/css

import ChevronRightIcon from "../landing_page_starter/icons/PlasmicIcon__ChevronRight"; // plasmic-import: yLX3owivRxFuO1/icon
import AppleIcon from "../landing_page_starter/icons/PlasmicIcon__Apple"; // plasmic-import: Zu9y5vY-DbAu23/icon

export type PlasmicDashboardProjectCard__VariantMembers = {
  isProjectDetailView: "isProjectDetailView";
};

export type PlasmicDashboardProjectCard__VariantsArgs = {
  isProjectDetailView?: SingleBooleanChoiceArg<"isProjectDetailView">;
};

type VariantPropType = keyof PlasmicDashboardProjectCard__VariantsArgs;
export const PlasmicDashboardProjectCard__VariantProps =
  new Array<VariantPropType>("isProjectDetailView");

export type PlasmicDashboardProjectCard__ArgsType = {};
type ArgPropType = keyof PlasmicDashboardProjectCard__ArgsType;
export const PlasmicDashboardProjectCard__ArgProps = new Array<ArgPropType>();

export type PlasmicDashboardProjectCard__OverridesType = {
  root?: p.Flex<"div">;
  toggleButton?: p.Flex<"svg">;
  title?: p.Flex<"div">;
  name?: p.Flex<"div">;
  dateTitle?: p.Flex<"div">;
  date?: p.Flex<"div">;
  priceTitle?: p.Flex<"div">;
  price?: p.Flex<"div">;
  descriptionTitle?: p.Flex<"div">;
  description?: p.Flex<"div">;
  statusTitle?: p.Flex<"div">;
  description2?: p.Flex<"div">;
  memberStack?: p.Flex<"div">;
  text?: p.Flex<"div">;
  memberName?: p.Flex<"div">;
  fileStack?: p.Flex<"div">;
};

export interface DefaultDashboardProjectCardProps {
  isProjectDetailView?: SingleBooleanChoiceArg<"isProjectDetailView">;
  className?: string;
}

function PlasmicDashboardProjectCard__RenderFunc(props: {
  variants: PlasmicDashboardProjectCard__VariantsArgs;
  args: PlasmicDashboardProjectCard__ArgsType;
  overrides: PlasmicDashboardProjectCard__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootisProjectDetailView]: hasVariant(
            variants,
            "isProjectDetailView",
            "isProjectDetailView"
          )
        }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__kDeGf, {
          [sty.freeBoxisProjectDetailView__kDeGffc3Aw]: hasVariant(
            variants,
            "isProjectDetailView",
            "isProjectDetailView"
          )
        })}
      >
        <ChevronRightIcon
          data-plasmic-name={"toggleButton"}
          data-plasmic-override={overrides.toggleButton}
          className={classNames(
            projectcss.all,
            sty.toggleButton,
            "cursor-hover" as const,
            {
              [sty.toggleButtonisProjectDetailView]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            }
          )}
          role={"img"}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox__k7Xv8, {
            [sty.freeBoxisProjectDetailView__k7Xv8Fc3Aw]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        >
          <div
            data-plasmic-name={"title"}
            data-plasmic-override={overrides.title}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title,
              {
                [sty.titleisProjectDetailView]: hasVariant(
                  variants,
                  "isProjectDetailView",
                  "isProjectDetailView"
                )
              }
            )}
          >
            {"專案名稱"}
          </div>

          <div
            data-plasmic-name={"name"}
            data-plasmic-override={overrides.name}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.name,
              {
                [sty.nameisProjectDetailView]: hasVariant(
                  variants,
                  "isProjectDetailView",
                  "isProjectDetailView"
                )
              }
            )}
          >
            {"桃園高鐵估價案"}
          </div>
        </div>

        <div
          className={classNames(projectcss.all, sty.freeBox__oYrc3, {
            [sty.freeBoxisProjectDetailView__oYrc3Fc3Aw]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        >
          <div
            data-plasmic-name={"dateTitle"}
            data-plasmic-override={overrides.dateTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.dateTitle
            )}
          >
            {"日期"}
          </div>

          <div
            data-plasmic-name={"date"}
            data-plasmic-override={overrides.date}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.date
            )}
          >
            {"2022/08/10"}
          </div>
        </div>

        <div className={classNames(projectcss.all, sty.freeBox__dyHIl)}>
          <div
            data-plasmic-name={"priceTitle"}
            data-plasmic-override={overrides.priceTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.priceTitle
            )}
          >
            {"總金額"}
          </div>

          <div
            data-plasmic-name={"price"}
            data-plasmic-override={overrides.price}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.price
            )}
          >
            {"500,000"}
          </div>
        </div>

        <div
          className={classNames(projectcss.all, sty.freeBox__bNeK, {
            [sty.freeBoxisProjectDetailView__bNeKfc3Aw]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        >
          <div
            data-plasmic-name={"descriptionTitle"}
            data-plasmic-override={overrides.descriptionTitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.descriptionTitle
            )}
          >
            {"備註"}
          </div>

          <div
            data-plasmic-name={"description"}
            data-plasmic-override={overrides.description}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.description
            )}
          >
            {"鋼筋鋼骨結構"}
          </div>
        </div>

        {(
          hasVariant(variants, "isProjectDetailView", "isProjectDetailView")
            ? true
            : true
        ) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__xUJap, {
              [sty.freeBoxisProjectDetailView__xUJapFc3Aw]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            })}
          >
            <div
              data-plasmic-name={"statusTitle"}
              data-plasmic-override={overrides.statusTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.statusTitle
              )}
            >
              {"狀態"}
            </div>

            <div
              data-plasmic-name={"description2"}
              data-plasmic-override={overrides.description2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.description2
              )}
            >
              {"進行中"}
            </div>
          </div>
        ) : null}
      </div>

      {(
        hasVariant(variants, "isProjectDetailView", "isProjectDetailView")
          ? true
          : true
      ) ? (
        <div
          data-plasmic-name={"memberStack"}
          data-plasmic-override={overrides.memberStack}
          className={classNames(projectcss.all, sty.memberStack, {
            [sty.memberStackisProjectDetailView]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text,
              {
                [sty.textisProjectDetailView]: hasVariant(
                  variants,
                  "isProjectDetailView",
                  "isProjectDetailView"
                )
              }
            )}
          >
            {"專案人員:"}
          </div>

          <div
            data-plasmic-name={"memberName"}
            data-plasmic-override={overrides.memberName}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.memberName,
              {
                [sty.memberNameisProjectDetailView]: hasVariant(
                  variants,
                  "isProjectDetailView",
                  "isProjectDetailView"
                )
              }
            )}
          >
            {"參與人員1"}
          </div>
        </div>
      ) : null}

      {(
        hasVariant(variants, "isProjectDetailView", "isProjectDetailView")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__nC6H, {
            [sty.freeBoxisProjectDetailView__nC6Hfc3Aw]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        >
          <Button
            className={classNames("__wab_instance", sty.button___8G8Zh, {
              [sty.buttonisProjectDetailView___8G8ZhFc3Aw]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            })}
            color={"red" as const}
          >
            {"新增檔案"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__vGjvj, {
              [sty.buttonisProjectDetailView__vGjvjFc3Aw]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            })}
            color={"red" as const}
          >
            {"編輯專案"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__aBlR, {
              [sty.buttonisProjectDetailView__aBlRfc3Aw]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            })}
            color={"red" as const}
          >
            {"管理人員"}
          </Button>

          <Button
            className={classNames("__wab_instance", sty.button__jrP1O, {
              [sty.buttonisProjectDetailView__jrP1OFc3Aw]: hasVariant(
                variants,
                "isProjectDetailView",
                "isProjectDetailView"
              )
            })}
            color={"red" as const}
          >
            {"刪除專案"}
          </Button>
        </p.Stack>
      ) : null}

      {(
        hasVariant(variants, "isProjectDetailView", "isProjectDetailView")
          ? true
          : false
      ) ? (
        <div
          data-plasmic-name={"fileStack"}
          data-plasmic-override={overrides.fileStack}
          className={classNames(projectcss.all, sty.fileStack, {
            [sty.fileStackisProjectDetailView]: hasVariant(
              variants,
              "isProjectDetailView",
              "isProjectDetailView"
            )
          })}
        />
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "toggleButton",
    "title",
    "name",
    "dateTitle",
    "date",
    "priceTitle",
    "price",
    "descriptionTitle",
    "description",
    "statusTitle",
    "description2",
    "memberStack",
    "text",
    "memberName",
    "fileStack"
  ],
  toggleButton: ["toggleButton"],
  title: ["title"],
  name: ["name"],
  dateTitle: ["dateTitle"],
  date: ["date"],
  priceTitle: ["priceTitle"],
  price: ["price"],
  descriptionTitle: ["descriptionTitle"],
  description: ["description"],
  statusTitle: ["statusTitle"],
  description2: ["description2"],
  memberStack: ["memberStack", "text", "memberName"],
  text: ["text"],
  memberName: ["memberName"],
  fileStack: ["fileStack"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  toggleButton: "svg";
  title: "div";
  name: "div";
  dateTitle: "div";
  date: "div";
  priceTitle: "div";
  price: "div";
  descriptionTitle: "div";
  description: "div";
  statusTitle: "div";
  description2: "div";
  memberStack: "div";
  text: "div";
  memberName: "div";
  fileStack: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDashboardProjectCard__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDashboardProjectCard__VariantsArgs;
    args?: PlasmicDashboardProjectCard__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDashboardProjectCard__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDashboardProjectCard__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDashboardProjectCard__ArgProps,
          internalVariantPropNames: PlasmicDashboardProjectCard__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDashboardProjectCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDashboardProjectCard";
  } else {
    func.displayName = `PlasmicDashboardProjectCard.${nodeName}`;
  }
  return func;
}

export const PlasmicDashboardProjectCard = Object.assign(
  // Top-level PlasmicDashboardProjectCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    toggleButton: makeNodeComponent("toggleButton"),
    title: makeNodeComponent("title"),
    _name: makeNodeComponent("name"),
    dateTitle: makeNodeComponent("dateTitle"),
    date: makeNodeComponent("date"),
    priceTitle: makeNodeComponent("priceTitle"),
    price: makeNodeComponent("price"),
    descriptionTitle: makeNodeComponent("descriptionTitle"),
    description: makeNodeComponent("description"),
    statusTitle: makeNodeComponent("statusTitle"),
    description2: makeNodeComponent("description2"),
    memberStack: makeNodeComponent("memberStack"),
    text: makeNodeComponent("text"),
    memberName: makeNodeComponent("memberName"),
    fileStack: makeNodeComponent("fileStack"),

    // Metadata about props expected for PlasmicDashboardProjectCard
    internalVariantProps: PlasmicDashboardProjectCard__VariantProps,
    internalArgProps: PlasmicDashboardProjectCard__ArgProps
  }
);

export default PlasmicDashboardProjectCard;
/* prettier-ignore-end */
