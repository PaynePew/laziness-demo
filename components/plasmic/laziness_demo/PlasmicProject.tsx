// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: DhprYlf-5nu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: 2AU0qEyM1oCTCP/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import ProjectCardDetail from "../../ProjectCardDetail"; // plasmic-import: UgNbjXEvxu8/component
import ProjectCardPrimary from "../../ProjectCardPrimary"; // plasmic-import: VqqXUhJrgP/component
import FooterSection from "../../FooterSection"; // plasmic-import: 1ez9I6FpbEKqEg/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "../landing_page_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicProject.module.css"; // plasmic-import: DhprYlf-5nu/css

export type PlasmicProject__VariantMembers = {};

export type PlasmicProject__VariantsArgs = {};
type VariantPropType = keyof PlasmicProject__VariantsArgs;
export const PlasmicProject__VariantProps = new Array<VariantPropType>();

export type PlasmicProject__ArgsType = {};
type ArgPropType = keyof PlasmicProject__ArgsType;
export const PlasmicProject__ArgProps = new Array<ArgPropType>();

export type PlasmicProject__OverridesType = {
  root?: p.Flex<"div">;
  projectHeroSection?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  h2?: p.Flex<"h2">;
  projectSection?: p.Flex<"div">;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultProjectProps {}

function PlasmicProject__RenderFunc(props: {
  variants: PlasmicProject__VariantsArgs;
  args: PlasmicProject__ArgsType;
  overrides: PlasmicProject__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{PlasmicProject.pageMetadata.title}</title>

        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProject.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProject.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            data-plasmic-name={"projectHeroSection"}
            data-plasmic-override={overrides.projectHeroSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.projectHeroSection)}
          >
            <Navbar
              data-plasmic-name={"navbar"}
              data-plasmic-override={overrides.navbar}
              className={classNames("__wab_instance", sty.navbar)}
            />

            <Reveal
              className={classNames("__wab_instance", sty.reveal__oeH5)}
              triggerOnce={true}
            >
              <h2
                data-plasmic-name={"h2"}
                data-plasmic-override={overrides.h2}
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2
                )}
              >
                {"工程實績"}
              </h2>
            </Reveal>
          </p.Stack>

          <p.Stack
            as={"div"}
            data-plasmic-name={"projectSection"}
            data-plasmic-override={overrides.projectSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.projectSection)}
          >
            <Reveal
              className={classNames("__wab_instance", sty.reveal___4EgR3)}
              direction={"up" as const}
              triggerOnce={true}
            >
              <ProjectCardDetail
                category={null}
                categoryTitle={null}
                className={classNames(
                  "__wab_instance",
                  sty.projectCardDetail__j5WMy
                )}
                description={
                  "工程結構：鋼骨結構+RC鋼筋混凝土\n建築樓層：4棟；L棟地上4層；N棟地上3層；M棟地上2層；K棟地上4層"
                }
                location={null}
                locationTitle={null}
                projectImage={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__eivcK)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/laziness_demo/images/水美工程觀音資源回收廠增建工程jpg.jpeg",
                      fullWidth: 805,
                      fullHeight: 410,
                      aspectRatio: undefined
                    }}
                  />
                }
                projectSubImage={null}
                title={"水美工程觀音資源回收廠增建工程"}
              />
            </Reveal>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__u6T1)}
              direction={"up" as const}
              triggerOnce={true}
            >
              <ProjectCardDetail
                category={null}
                categoryTitle={null}
                className={classNames(
                  "__wab_instance",
                  sty.projectCardDetail__kNLiV
                )}
                description={
                  "工程結構：RC鋼筋混凝土\n建築樓層：地下3層，地上1層"
                }
                location={null}
                locationTitle={null}
                projectImage={
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__v96BG)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/laziness_demo/images/三重區重陽公園停車場新建統包工程jpg.jpeg",
                      fullWidth: 805,
                      fullHeight: 220,
                      aspectRatio: undefined
                    }}
                  />
                }
                projectSubImage={
                  <React.Fragment>
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__iZssk)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/laziness_demo/images/三重區重陽公園停車場新建統包工程1Jpg.jpeg",
                        fullWidth: 206,
                        fullHeight: 125,
                        aspectRatio: undefined
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___1LQnW)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/laziness_demo/images/三重區重陽公園停車場新建統包工程2Jpg.jpeg",
                        fullWidth: 204,
                        fullHeight: 124,
                        aspectRatio: undefined
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__l8Jb)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/laziness_demo/images/三重區重陽公園停車場新建統包工程3Jpg.jpeg",
                        fullWidth: 199,
                        fullHeight: 124,
                        aspectRatio: undefined
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__sLPdF)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/laziness_demo/images/三重區重陽公園停車場新建統包工程4Jpg.jpeg",
                        fullWidth: 204,
                        fullHeight: 121,
                        aspectRatio: undefined
                      }}
                    />
                  </React.Fragment>
                }
                revers={true}
                title={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nnuka
                    )}
                  >
                    {"三重區重陽公園停車場新建統包工程"}
                  </div>
                }
              />
            </Reveal>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vQsK1)}
            >
              <Reveal
                className={classNames("__wab_instance", sty.reveal__zIwrX)}
                direction={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("up" as const)
                    : ("left" as const)
                }
                triggerOnce={true}
              >
                <ProjectCardPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.projectCardPrimary__nX0W
                  )}
                  description={null}
                  location={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__c1I
                      )}
                    >
                      {"工程結構：RC鋼筋混凝土"}
                    </div>
                  }
                  projectImage={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yFef)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___3SZgb)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/laziness_demo/images/大園區五塊厝集合住宅新建工程jpg.jpeg",
                          fullWidth: 607,
                          fullHeight: 215,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  }
                  subtitle={"建築樓層：2棟；地下2層，地上１1層"}
                  title={"大園區五塊厝段集合住宅新建工程"}
                />
              </Reveal>

              <Reveal
                className={classNames("__wab_instance", sty.reveal__cpxKt)}
                direction={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("up" as const)
                    : ("right" as const)
                }
                triggerOnce={true}
              >
                <ProjectCardPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.projectCardPrimary__kJ8Zy
                  )}
                  description={null}
                  location={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__w4Dy7
                      )}
                    >
                      {"工程結構：RC鋼筋混凝土"}
                    </div>
                  }
                  projectImage={
                    <div
                      className={classNames(projectcss.all, sty.freeBox__l1Omf)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__xubhu)}
                        displayHeight={"100%" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"100%" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/laziness_demo/images/威鈞君藏集合式住宅案jpg.jpeg",
                          fullWidth: 604,
                          fullHeight: 195,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  }
                  subtitle={"建築樓層：地下３層，地上１９層"}
                  title={"威鈞君藏集合式住宅案"}
                />
              </Reveal>
            </p.Stack>
          </p.Stack>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "projectHeroSection",
    "navbar",
    "h2",
    "projectSection",
    "footerSection"
  ],
  projectHeroSection: ["projectHeroSection", "navbar", "h2"],
  navbar: ["navbar"],
  h2: ["h2"],
  projectSection: ["projectSection"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  projectHeroSection: "div";
  navbar: typeof Navbar;
  h2: "h2";
  projectSection: "div";
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProject__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProject__VariantsArgs;
    args?: PlasmicProject__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProject__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProject__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProject__ArgProps,
          internalVariantPropNames: PlasmicProject__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProject__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProject";
  } else {
    func.displayName = `PlasmicProject.${nodeName}`;
  }
  return func;
}

export const PlasmicProject = Object.assign(
  // Top-level PlasmicProject renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    projectHeroSection: makeNodeComponent("projectHeroSection"),
    navbar: makeNodeComponent("navbar"),
    h2: makeNodeComponent("h2"),
    projectSection: makeNodeComponent("projectSection"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicProject
    internalVariantProps: PlasmicProject__VariantProps,
    internalArgProps: PlasmicProject__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "工程實績",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProject;
/* prettier-ignore-end */
