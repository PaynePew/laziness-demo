// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qtkpEraJg2gN978YDtMYaP
// Component: Om1BIURR5aO
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navbar from "../../Navbar"; // plasmic-import: 2AU0qEyM1oCTCP/component
import PriceCalculator from "../../PriceCalculator"; // plasmic-import: d8mQqWAV6f/component
import { PriceChart } from "../../PriceChart"; // plasmic-import: ZopKvLJJag/codeComponent
import FooterSection from "../../FooterSection"; // plasmic-import: 1ez9I6FpbEKqEg/component

import { useScreenVariants as useScreenVariantsnCpqQwRKrRf2Hx } from "../landing_page_starter/PlasmicGlobalVariant__Screen"; // plasmic-import: nCpqQwRKrRf2Hx/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../landing_page_starter/plasmic_landing_page_starter.module.css"; // plasmic-import: qtkpEraJg2gN978YDtMYaP/projectcss
import sty from "./PlasmicPrice.module.css"; // plasmic-import: Om1BIURR5aO/css

export type PlasmicPrice__VariantMembers = {};

export type PlasmicPrice__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrice__VariantsArgs;
export const PlasmicPrice__VariantProps = new Array<VariantPropType>();

export type PlasmicPrice__ArgsType = {};
type ArgPropType = keyof PlasmicPrice__ArgsType;
export const PlasmicPrice__ArgProps = new Array<ArgPropType>();

export type PlasmicPrice__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<typeof Navbar>;
  headerHeroSection?: p.Flex<"div">;
  h2?: p.Flex<"h2">;
  priceSection?: p.Flex<"div">;
  priceCalculator?: p.Flex<typeof PriceCalculator>;
  priceChart?: p.Flex<typeof PriceChart>;
  footerSection?: p.Flex<typeof FooterSection>;
};

export interface DefaultPriceProps {}

function PlasmicPrice__RenderFunc(props: {
  variants: PlasmicPrice__VariantsArgs;
  args: PlasmicPrice__ArgsType;
  overrides: PlasmicPrice__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsnCpqQwRKrRf2Hx()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />

        <title key="title">{"價目表"}</title>

        <meta key="og:title" property="og:title" content={"價目表"} />

        <meta key="twitter:title" name="twitter:title" content={"價目表"} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"headerHeroSection"}
              data-plasmic-override={overrides.headerHeroSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.headerHeroSection)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <h2
                  data-plasmic-name={"h2"}
                  data-plasmic-override={overrides.h2}
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2
                  )}
                >
                  {"價目表"}
                </h2>
              ) : null}
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            data-plasmic-name={"priceSection"}
            data-plasmic-override={overrides.priceSection}
            hasGap={true}
            className={classNames(projectcss.all, sty.priceSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__ncMso)}>
              <PriceCalculator
                data-plasmic-name={"priceCalculator"}
                data-plasmic-override={overrides.priceCalculator}
                className={classNames("__wab_instance", sty.priceCalculator)}
              />
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__nHRf)}>
              <PriceChart
                data-plasmic-name={"priceChart"}
                data-plasmic-override={overrides.priceChart}
                className={classNames("__wab_instance", sty.priceChart)}
                height={500 as const}
                maxWidth={100 as const}
                width={undefined}
              />
            </div>
          </p.Stack>

          <FooterSection
            data-plasmic-name={"footerSection"}
            data-plasmic-override={overrides.footerSection}
            className={classNames("__wab_instance", sty.footerSection)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "headerHeroSection",
    "h2",
    "priceSection",
    "priceCalculator",
    "priceChart",
    "footerSection"
  ],
  navbar: ["navbar"],
  headerHeroSection: ["headerHeroSection", "h2"],
  h2: ["h2"],
  priceSection: ["priceSection", "priceCalculator", "priceChart"],
  priceCalculator: ["priceCalculator"],
  priceChart: ["priceChart"],
  footerSection: ["footerSection"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  headerHeroSection: "div";
  h2: "h2";
  priceSection: "div";
  priceCalculator: typeof PriceCalculator;
  priceChart: typeof PriceChart;
  footerSection: typeof FooterSection;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrice__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrice__VariantsArgs;
    args?: PlasmicPrice__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrice__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrice__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPrice__ArgProps,
          internalVariantPropNames: PlasmicPrice__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicPrice__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrice";
  } else {
    func.displayName = `PlasmicPrice.${nodeName}`;
  }
  return func;
}

export const PlasmicPrice = Object.assign(
  // Top-level PlasmicPrice renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    headerHeroSection: makeNodeComponent("headerHeroSection"),
    h2: makeNodeComponent("h2"),
    priceSection: makeNodeComponent("priceSection"),
    priceCalculator: makeNodeComponent("priceCalculator"),
    priceChart: makeNodeComponent("priceChart"),
    footerSection: makeNodeComponent("footerSection"),

    // Metadata about props expected for PlasmicPrice
    internalVariantProps: PlasmicPrice__VariantProps,
    internalArgProps: PlasmicPrice__ArgProps
  }
);

export default PlasmicPrice;
/* prettier-ignore-end */
