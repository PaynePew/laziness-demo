// This is a skeleton starter React page generated by Plasmic.
// This file is owned by you, feel free to edit as you see fit.
import * as React from "react";
import * as ph from "@plasmicapp/host";
import GlobalContextsProvider from "../components/plasmic/laziness_demo/PlasmicGlobalContextsProvider";
import { ScreenVariantProvider } from "../components/plasmic/landing_page_starter/PlasmicGlobalVariant__Screen";
import { PlasmicLogIn } from "../components/plasmic/laziness_demo/PlasmicLogIn";
import { GetServerSidePropsContext } from "next";
import { useRouter } from "next/router";
import { getUser } from "@supabase/auth-helpers-nextjs";
import { useUser as useSupaUser } from "@supabase/auth-helpers-react";
import { useUser } from "../utils/useUser";
import { getIsAdmin } from "../utils/supabase-server";

function LogIn() {
  const router = useRouter();
  // const { user, isLoading } = useSupaUser();
  const { userDetails, isLoading } = useUser();
  React.useEffect(() => {
    if (userDetails && !isLoading) {
      if (userDetails.isadmin) {
        router.replace("/admin");
        return;
      }
      router.replace("/member");
    }
  }, [userDetails]);

  return (
    <GlobalContextsProvider>
      <ph.PageParamsProvider
        params={useRouter().query}
        query={useRouter().query}
      >
        <PlasmicLogIn />
      </ph.PageParamsProvider>
    </GlobalContextsProvider>
  );
}

export default LogIn;

// export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
//   const { user } = await getUser(ctx);
//   const isAdmin = await getIsAdmin(ctx);
//   console.log("user", user);
//   console.log("isAdmin", isAdmin);
//   if (user) {
//     if (isAdmin) {
//       return {
//         redirect: { permanent: false, destination: "/admin" },
//       };
//     }
//     return {
//       redirect: { permanent: false, destination: "/member" },
//     };
//   }
//   return {
//     props: {},
//   };
// };

// export const getServerSideProps = withPageAuth({
//   redirectTo: "/login",
//   async getServerSideProps(ctx) {
//     const isAdmin = await getIsAdmin(ctx);
//     if (isAdmin) {
//       return {
//         redirect: { permanent: false, destination: "/admin" },
//       };
//     }
//     return {
//       props: {},
//     };
//   },
// });
